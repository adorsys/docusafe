Documentsafe ist eine Anwendung, um beliebige Daten sicher verschlüsselt in der Cloud zu speichern.
Architektur

Das System ist in 5 Schichten unterteilt. Hier nun die Beschreibung der Schichten von unten (low level) bis oben (business):

    layer00common: Hier ist nur das ExceptionHandling und allgemeine Typen hinterlegt, die grundsätzlich von JEDER Anwendung benötigt werden.
    layer01persistence: Hier sind einige Erweiterung der Persistenz aus cryptutils gemacht worden.
    layer02service: Hier sind insbesondere die Ver- und Entschlüsselungsdienste hinterlegt.
    layer03business: Hier ist die Geschäftslogik hinterlegt, wie die Dienste aus layer02 BENUTZERFREUNDLICH genutzt werden können.
    layer04rest: Hier werden die Dienste aus layer03 nach aussen angeboten.


layer00common

Das ExceptionHandling des Documentsafes beruht auf dem Axiom, dass Exceptions nicht zur Signatur gehörten. Mit dieser Festlegung verschwinden sämtliche Exceptions aus den Schnittstellen. Eigene Exceptions sind immer abgeleitet von der BaseException. Diese selbst ist eine RuntimeException. Typisiserte Exceptions des Systems werden mit dem BaseExceptionHandler gefangen und in eine BaseException konvertiert und weitergeworfen. Die BaseException hat die Besonderheit, sich selbst zur Konstruktionszeit zu loggen. Damit werden Exceptions so früh wie möglich geloggt. Des weiteren wird eine BaseException auch immer genau nur einmal geloggt. D.h falls der BaseExceptionHandler eine BaseException fängt, wirft er diese weiter, ohne sie zu verändern.
    
Typisierung. In der Anwendung wird typisierung sehr streng genommen. Strings und Integer sind allgemeine Typen, können aber verwechselt werden. So kann eine Vorname mit einem Nachnamen vertauscht werden, weil beide vom Typ String sind. Hier im Documentsafe wird jede! Entität mit einem eigenen Typen versehen. So gibt es z.B. den Typ DocumentID und DocumentKeyID. Letztlich sind beide vom BaseTypeString, aber in den Signaturen erkennt man sofort, welcher Typ wo benutzt werden darf. Dies hat mehrere Vorteile:  Es führt zum einen zu einer Arbeitserleichterung, weil die IDE sofort weiss, welche Variablen überhaupt eingesetzt werden könnten. Es macht eine Refakturierung eines Typen viel einfacher, weil die IDE weiss, welche Signaturen angepasst werden müssen. So könnte man z.B. aus der DocumentID ggf. einen Integer machen und müsste keine einzige Signatur ändern, weil in den Interfaces nach wie vor nur DocumentID steht. Und schließlich führt es zwangsweise zu weniger Fehlern.

layer01persistence

    Hier sind einige Erweiterung der Persistenz aus cryptutils gemacht worden. Ziel ist es, diese Schicht wieder in das cryptutils Projekt zu integrieren. Insbesondere wird hier noch der BlobStore der JCloud benutzt. Hier soll kurzfristig ein implementierungsunabhängiges Interfaces geschaffen werden.

layer02service

     Die Technik für die Ver- und Entschlüsselung kommt auch hier größtenteils aus cryptutils oder als Plooh Fragmenten. Auch dieses Layer soll später als eigentständiges JAR File ausgelagert werden. Hier befindet sich das Kernstück der Anwendung.








